#ifndef SKYWALKER_H
#define SKYWALKER_H

#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>

#ifdef __cplusplus
extern "C" {
#endif

#define SKYWALKER_MAJOR_VERSION @SKYWALKER_MAJOR_VERSION@
#define SKYWALKER_MINOR_VERSION @SKYWALKER_MINOR_VERSION@
#define SKYWALKER_PATCH_VERSION @SKYWALKER_PATCH_VERSION@

// Prints a banner containing Skywalker's version info to stderr.
void sw_print_banner(void);

// Error codes (treated as integers).
typedef enum sw_error_code_t {
  SW_SUCCESS = 0,            // no error occurred
  SW_YAML_FILE_NOT_FOUND,    // the specified YAML file was not found
  SW_INVALID_YAML,           // a problem was encountered parsing the YAML file
  SW_INVALID_ENSEMBLE_TYPE,  // an invalid ensemble type was read from the YAML file
  SW_INVALID_PARAM_VALUE,    // an invalid input value was read from the YAML file
  SW_INVALID_SETTINGS_BLOCK, // an invalid setting block name was given
  SW_SETTINGS_NOT_FOUND,     // the specified YAML settings block was not found
  SW_INVALID_PARAM_NAME,     // the specified parameter name is invalid
  SW_PARAM_NOT_FOUND,        // the specified setting/input parameter was not found
  SW_TOO_MANY_PARAMS,        // the specified lattice ensemble has > 7 parameters
  SW_INVALID_ENUMERATION,    // the specified enumeration ensemble has an invalid
                             // enumeration
  SW_EMPTY_ENSEMBLE          // the specified ensemble has no members
} sw_error_code_t;

// Precision of real numbers
typedef @SKYWALKER_REAL_TYPE@ sw_real_t;

// This type represents an ensemble that has been loaded from a skywalker input
// file. It's an opaque type whose innards cannot be manipulated.
typedef struct sw_ensemble_t sw_ensemble_t;

// This type identifies the type of a given ensemble're running a "lattice"
// or "enumeration" ensemble.
typedef enum sw_ens_type_t {
  SW_LATTICE = 0, // ensemble members constructed from outer product of inputs
  SW_ENUMERATION  // ensemble members constructed from an explicit list
} sw_ens_type_t;

// This opaque type stores named settings intended for use with Skywalker driver
// programs.
typedef struct sw_settings_t sw_settings_t;

// Input data for simulations. Opaque type.
typedef struct sw_input_t sw_input_t;

// Output data for simulations. Opaque type.
typedef struct sw_output_t sw_output_t;

// This type contains all data loaded from an ensemble, including an error code
// and description of any issues encountered loading the ensemble. Do not
// attempt to free any of these resources.
typedef struct sw_ensemble_result_t {
  // The settings associated with the driver program
  sw_settings_t *settings;
  // The ensemble loaded (or NULL on failure)
  sw_ensemble_t *ensemble;
  // The ensemble's type
  sw_ens_type_t type;
  // An error code indicating any problems encountered loading the ensemble
  // (zero = success, non-zero = failure)
  int error_code;
  // A string describing any error encountered, or NULL if error_code == 0.
  const char* error_message;
} sw_ensemble_result_t;

// Reads an ensemble from a YAML input file, returning a pointer to the ensemble
// (or NULL if the read was not successful). The settings_block argument
// indicates the name of the YAML block to read to retrieve settings for the
// driver program using Skywalker.
sw_ensemble_result_t sw_load_ensemble(const char *yaml_file,
                                      const char *settings_block);

// This type stores the result of the attempt to fetch a setting.
typedef struct sw_setting_result_t {
  const char* value;         // fetched value (if error_code == 0)
  int error_code;            // error code indicating success or failure
  const char* error_message; // text description of error
} sw_settings_result_t;

// Retrieves the setting with the given name.
sw_settings_result_t sw_settings_get(sw_settings_t *settings,
                                     const char *name);

// Returns the size of the given ensemble.
size_t sw_ensemble_size(sw_ensemble_t* ensemble);

// Iterates over the inputs and outputs in an ensemble, making them available
// one at a time for computation. This function returns true once for each
// member of an ensemble and false once the ensemble's members have been
// traversed. Use it as a predicate in a while loop in which inputs and outputs
// are processed.
bool sw_ensemble_next(sw_ensemble_t *ensemble,
                      sw_input_t **input,
                      sw_output_t **output);

// This type stores the result of the attempt to fetch an input parameter.
typedef struct sw_input_result_t {
  sw_real_t value;           // fetched value (if error_code == 0)
  int error_code;            // error code indicating success or failure
  const char* error_message; // text description of error
} sw_input_result_t;

// Retrieves the input parameter with the given name.
sw_input_result_t sw_input_get(sw_input_t *input,
                               const char *name);

// This type stores the result of an attempt to store an output metric.
typedef struct sw_output_result_t {
  int error_code;            // error code indicating success or failure
  const char* error_message; // text description of error
} sw_output_result_t;

// This function sets a quantity with the given name and value to the given
// output instance, returning a result that indicates success or failure.
sw_output_result_t sw_output_set(sw_output_t *output,
                                 const char *name,
                                 sw_real_t value);

// Writes input and output data within the ensemble to a Python module stored
// in the file with the given name.
void sw_ensemble_write(sw_ensemble_t *ensemble, const char *module_filename);

// Destroys an ensemble, freeing its allocated resources. Use this at the end
// of your driver program, or when a fatal error has been encountered.
void sw_ensemble_free(sw_ensemble_t *ensemble);

#ifdef __cplusplus
} // extern "C"
#endif

#endif
