#ifndef SKYWALKER_H
#define SKYWALKER_H

#include <stdbool.h>
#include <stdlib.h>

// Error codes
static const int SKYWALKER_SUCCESS = 0;

// Precision of real numbers
typedef @SKYWALKER_REAL_TYPE@ real_t;

// Input data for simulations.
typedef struct sw_input_t {

  // Number of input parameters.
  size_t num_params;

  // Names of input parameters (of length num_params)
  const char **param_names;

  // Values of input parameters (of length num_params)
  real_t *param_values;
} sw_input_t;

// Output data for simulations. Opaque type.
typedef struct sw_output_t sw_output_t;

// This function adds a metric with the given name and value to the given output
// instance, returning an error code indicating success or failure.
int sw_output_add_metric(sw_output_t *output,
                         const char *name,
                         const real_t value);

// This type stores named settings intended for use with Skywalker driver
// programs.
typedef struct sw_settings_t {
  // Number of settings.
  size_t num_settings;

  // Names of settings (of length num_settings)
  const char **setting_names;

  // (String) values of settings (of length num_settings)
  const char **setting_values;
} sw_settings_t;

// This type represents an ensemble that has been loaded from a skywalker input
// file. It's an opaque type whose innards cannot be manipulated.
typedef struct sw_ensemble_t sw_ensemble_t;

// This type contains all data loaded from an ensemble, including an error code
// and description of any issues encountered loading the ensemble. Do not
// attempt to free any of these resources.
typedef struct sw_load_result_t {
  // The ensemble loaded (or NULL on failure)
  sw_ensemble_t *ensemble;
  // The settings associated with the driver program
  sw_settings_t settings;
  // An error code indicating any problems encountered loading the ensemble
  // (zero = success, non-zero = failure)
  int error_code;
  // A string describing any error encountered, or NULL if error_code == 0.
  const char* error_message;
} sw_load_result_t;

// Reads an ensemble from a YAML input file, returning a pointer to the ensemble
// (or NULL if the read was not successful). The settings_block argument
// indicates the name of the YAML block to read to retrieve settings for the
// driver program using Skywalker.
sw_load_result_t sw_load_ensemble(const char *yaml_file,
                                  const char *settings_block);

// Iterates over the inputs and outputs in an ensemble, making them available
// one at a time for computation. Use this function as a predicate in a while
// loop, with *pos set to 0.
bool sw_ensemble_next(sw_ensemble_t *ensemble,
                      int *pos,
                      const sw_input_t **input,
                      sw_output_t **output);

// Writes input and output data within the ensemble to a Python module stored
// in the file with the given name. This function consumes the ensemble, freeing
// all resources associated with it.
void sw_ensemble_write(sw_ensemble_t *ensemble, const char *module_filename);

#endif
